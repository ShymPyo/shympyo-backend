name: 릴리스 및 NCP 미러
on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-24.04
    env:
      DEPLOY_FILE: deploy/k8s/app/shympyo-app-deployment.yaml
      IMAGE_NAME: shympyo-backend
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git 사용자 설정
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 이미지 태그 증가
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          f="$DEPLOY_FILE"
          line=$(grep -E "image:\s*.*${IMAGE_NAME}:" "$f" | head -n1)
          cur=$(echo "$line" | awk -F: '{print $NF}' | tr -d " ")
          IFS='.' read -r -a v <<< "$cur"
          n=$((${#v[@]}-1)); v[$n]=$(( ${v[$n]} + 1 ))
          new=$(IFS='.'; echo "${v[*]}")
          sed -i -E "s#(image:\s*.*${IMAGE_NAME}:)${cur}#\1${new}#g" "$f"
          echo "current=$cur" >> $GITHUB_OUTPUT
          echo "new=$new" >> $GITHUB_OUTPUT

      - name: 커밋 및 푸시(main)
        run: |
          git add "$DEPLOY_FILE"
          git commit -m "chore(release): bump image tag to ${{ steps.bump.outputs.new }} [skip ci]" || echo "No changes"
          git push origin HEAD:main

      - name: NCP로 미러 푸시
        env:
          NCP_SC_REMOTE_URL: ${{ secrets.NCP_SC_REMOTE_URL }}
        run: |
          git remote add ncp "$NCP_SC_REMOTE_URL" 2>/dev/null || git remote set-url ncp "$NCP_SC_REMOTE_URL"
          git push ncp HEAD:main
          git tag -f "v${{ steps.bump.outputs.new }}"
          git push ncp "v${{ steps.bump.outputs.new }}"

      - name: 브랜치 가져오기
        run: |
          git fetch origin main
          git fetch origin develop

      - name: main → develop 빠른 병합 시도
        id: sync
        run: |
          set -e
          git checkout -B develop origin/develop
          if git merge --ff-only origin/main; then
            echo "ff=true" >> $GITHUB_OUTPUT
          else
            echo "ff=false" >> $GITHUB_OUTPUT
          fi

      - name: develop 푸시
        if: steps.sync.outputs.ff == 'true'
        run: git push origin develop

      - name: 충돌 시 PR 생성(main → develop)
        if: steps.sync.outputs.ff != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prs = await github.rest.pulls.list({ owner, repo, state: 'open', base: 'develop', head: `${owner}:main` });
            if (prs.data.length === 0) {
              await github.rest.pulls.create({
                owner, repo,
                title: 'Sync main → develop',
                head: 'main',
                base: 'develop',
                body: '자동 동기화 PR입니다. 충돌 해결 후 머지하세요.'
              });
            }
